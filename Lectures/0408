var name=[type]()
var score=[Int]()
var subwayAdult=[Int]()
print(subwayAdult)
var subwayChild=[Int]()
print(subwayChild)


var location: [Double] = [40.7245, -73.9979]
var subwayAdult:[Int]=[800,1200,1500]
print(subwayAdult)
var subwayChild:[Int]=[400,600,800]
print(subwayChild)

var temperature : [Int] = [66,68,67,72,76,78,82,80,73,69,60]
print(temperature[0])

print(grocery.count)
var countingRhyme = ["Ennie","Cat","miny","moe"]
print(countingRhyme.count)


gymBadges.append("Thunder")
gymBadges += ["Thunder", "Rainbow"]




moon.insert("ðŸŒ•", at: 0)
moon.remove(at: 4)

var dna =["ATG","ACG","GAA","TCT"]
dna.insert ("GTG", at: 3)
dna.remove (at:0)



for item in array {
  // Loop body
}
}

//----------------------------
//0408
/*var location: [Double] = [40.7245, -73.9979]
var subwayAdult:[Int]=[800,1200,1500]
print(subwayAdult)
var subwayChild:[Int]=[400,600,800]
print(subwayChild)

var temperature : [Int] = [66,68,67,72,76,78,82,80,73,69,60]
print(temperature[0])
*/

//var countingRhyme = ["Ennie","Cat","miny","moe"]
//print(countingRhyme.count)
/*var resolutions = ["Play more music", "Read more books","Drink more water"]
resolutions.append("Work out more")
print(resolutions)

resolutions += ["Get a dog"]
print(resolutions)
*/

/*var receipt = [12.00, 13.00, 9.00, 8.15]
var total: Double = 0.0
for item in receipt {
total = total + item
}
total*=1.0887
print(total)
*/


var arrNum = [2, 4, 3, 6, 1, 9]
var sumEven = 0
var prodOdd = 1
 
for item in arrNum {
  if item % 2 == 0 {
    sumEven += item
  } else {
    prodOdd *= item
  }
}
 
print("Sum of even is \(sumEven)")
print("Product of odd is \(prodOdd)")

//var setName = Set<Type>()
//var setName : Set =[value1, value2, value3]

var consonants = Set <Character> ()
var vowels : Set =["a","e","i","o","u"]
print vowels

/*setName.count
setName.isEmpty
setName.insert(NewValue)
setName.remove(Value)
setName.removeAll()
*/

setName.contains(Value)

var coffeeFlavors : Set = ["Blueberry","Camel","Chocolate"]
if coffeeFalvors.contains("Blueberry"){
  print("Blueberry coming up")
}
else
   print("No such coffee")

var bothHemispheres = northHemisphere.intersection(southHemisphere)

var swim: Set = ["duck","fish","turtle"]
var fly: Set = ["duck","bat","butterfly"]
var swimAndFly = Set<String>()
print(swimAndFly)
var swimAndFly2 = swim.intersection(fly)

var NewSet = SetA.union(SetB)
var NewSet = SetA.symmetricDifference(SetB)
var newSet = SetA.subtracting(SetB)

Great job completing this lesson!

Letâ€™s go over what we learned:

A set is an unordered collection of unique elements.

We have the option to initialize sets that are either empty or populated:

var emptySet = Set<Type>()
var populatedSet: Set = [Value1, Value2, Value3]
To add new elements to a set, use the built-in method, .insert(Value).

We can remove a single element from a set using .remove(Value) or we can remove all the values from a set with .removeAll():

If we want to check if a value exists within a set, we can use the method .contains(Value) .

A for-in loop can be used to iterate through all the values of a set:

for placeholder in setName {
// Body of loop
}
We can use set operations to modify or create new sets based on the data in two different sets.

The .intersection() operation creates sets with values that overlap in two sets:

soda.intersection(seltzer)
The .union() operation combines all the values of two different sets:

ketchup.union(mayo)
The operation .symmetricDifference() creates a set of items that appear in one set, but not both:

capulets.symmetricDifference(montagues)
.subtracting() is a set operation that removes the overlapping data of one set from another:

milkshake.subtracting(iceCream)
